#include <Adafruit_NeoPixel.h>
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEClient.h>
#include <BLEServer.h>
#include <Arduino.h>
#include <Wire.h>

#define LED_PIN     13
#define NUM_LEDS    5

//color define
#define RED 1
#define GREEN 2
#define BLUE 3
#define PURPLE 4
#define RESET 5
#define WHITE 0

// NeoPixel setup
Adafruit_NeoPixel strip = Adafruit_NeoPixel(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);

BLEClient* pClient;
bool doconnect = false;

// BLE Server name (the other ESP32 name running the server sketch)
#define bleServerName "XIAOESP32S3_BLE"

// Address of the peripheral device. Address will be found during scanning...
static BLEAddress *pServerAddress;

BLEUUID serviceUUID("181A"); // Environmental Sensing
BLEUUID charUUID("2A59");    // Analog Output

char xVal[1024];

 int success_counter[4] = {0, 0, 0, 0};



// Callback function that gets called when another device's advertisement has been received
class MyAdvertisedDeviceCallbacks: public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    if (advertisedDevice.getName() == bleServerName) {
      advertisedDevice.getScan()->stop();
      pServerAddress = new BLEAddress(advertisedDevice.getAddress());
      Serial.println("Device found. Connecting!");
    }
  }
};

void setup() {
  Serial.begin(115200);

  
  // NeoPixel initialization
  strip.begin();
  strip.show(); // Initialize all pixels to 'off'

  // Client Setup
  Serial.println("Starting BLE client...");
  BLEDevice::init("XIAOESP32S3_Client");

  BLEScan* pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->start(30);

  pClient = BLEDevice::createClient();
  pClient->connect(*pServerAddress);
  Serial.println(" - Connected to server");

  BLERemoteService* pRemoteService = pClient->getService(serviceUUID);
  if (pRemoteService == nullptr) {
    Serial.print("Failed to find our service UUID: ");
    Serial.println(serviceUUID.toString().c_str());
    return;
  }

  BLERemoteCharacteristic* pCharacteristic = pRemoteService->getCharacteristic(charUUID);
  if (pCharacteristic == nullptr) {
    Serial.print("Failed to find our characteristic UUID");
    return;
  }
  Serial.println(" - Found light value characteristics");

  pCharacteristic->registerForNotify([](BLERemoteCharacteristic* pBLERemoteCharacteristic, uint8_t* pData, size_t length, bool isNotify) {
    Serial.println("Notify received");
    Serial.print("Value: ");
    Serial.println(*pData);
    snprintf(xVal, sizeof(xVal), "%d", *pData);
  });

  doconnect = true;
  Serial.println("Receiving...");
}

void loop() {
  int signal = atoi(xVal);

  if (doconnect) {


    //fun random pattern
  if (success_counter[0] == 1 && success_counter[1] == 1 && success_counter[2] == 1 && success_counter[3] == 1) {
    // Set your desired pattern here
    // For example, alternating red and green colors
    for (int i = 0; i < NUM_LEDS; i += 2) {
      strip.setPixelColor(i, strip.Color(255, 0, 0));  // Red
    }
    for (int i = 1; i < NUM_LEDS; i += 2) {
      strip.setPixelColor(i, strip.Color(0, 255, 0));  // Green
    }
    strip.show(); // Display the pattern
    // Reset success_counter
    for (int i = 0; i < 4; i++) {
      success_counter[i] = 0;
    }
    strip.setPixelColor(1, strip.Color(0, 0, 0)); // PURPLE permanent
    strip.setPixelColor(2, strip.Color(0, 0, 0)); // PURPLE permanent
    strip.setPixelColor(3, strip.Color(0, 0, 0)); // PURPLE permanent
    strip.setPixelColor(4, strip.Color(0, 0, 0)); // PURPLE permanent
  }
    
    if (signal == WHITE) {
      Serial.println("WHITE LED turning on:");
      strip.setPixelColor(0, strip.Color(255, 255, 255)); // WHITE
    } else if (signal == RED) {
      Serial.println("RED LED turning on:");
      strip.setPixelColor(0, strip.Color(255, 0, 0)); // RED indicator
      strip.setPixelColor(1, strip.Color(255, 0, 0)); // RED permanent
      success_counter[0]=1;
    }else if (signal == GREEN) {
      Serial.println("GREEN LED turning on:");
      strip.setPixelColor(0, strip.Color(0, 255, 0)); // GREEN indicator
      strip.setPixelColor(2, strip.Color(0, 255, 0)); // GREEN permanent
      success_counter[1]=1;
    }else if (signal == BLUE) {
      Serial.println("BLUE LED turning on:");
      strip.setPixelColor(0, strip.Color(0, 0, 255)); // BLUE indicator
      strip.setPixelColor(3, strip.Color(0, 0, 255)); // BLUE permanent
      success_counter[2]=1;
    }else if (signal == PURPLE) {
      Serial.println("PURPLE LED turning on:");
      strip.setPixelColor(0, strip.Color(255, 0, 255)); // PURPLE indicator
      strip.setPixelColor(4, strip.Color(255, 0, 255)); // PURPLE permanent
      success_counter[3]=1;
    } else if (signal = RESET){
          for (int i = 0; i < 4; i++) {
             success_counter[i] = 0;
          }
          Serial.println("RESET");
          strip.setPixelColor(0, strip.Color(0, 0, 0)); // white
          strip.setPixelColor(1, strip.Color(0, 0, 0)); // RED permanent
          strip.setPixelColor(2, strip.Color(0, 0, 0)); // BLUE permanent
          strip.setPixelColor(3, strip.Color(0, 0, 0)); // GREEN permanent
          strip.setPixelColor(4, strip.Color(0, 0, 0)); // PURPLE permanent
      }
    strip.show(); // Update the strip to set the color


    if (signal != WHITE) {
      Serial.println("Signal Locked");
      delay(4000);
    } else {
      delay(1000);
    }
  } else {
    Serial.println("Not Connected");
  }
}
