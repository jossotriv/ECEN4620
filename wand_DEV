//server
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <BLEServer.h>
#include <Adafruit_LSM6DSOX.h>
#include <Arduino.h>

// For SPI mode, we need a CS pin
#define LSM_CS 10
// For software-SPI mode we need SCK/MOSI/MISO pins
#define LSM_SCK  18  // Default VSPI SCK pin on many DevKit models
#define LSM_MISO 19  // Default VSPI MISO pin
#define LSM_MOSI 23  // Default VSPI MOSI pin


//Reset Pin
const int RESETPin = 32;


//color define
#define RED 1
#define GREEN 2
#define BLUE 3
#define PURPLE 4
#define RESET 5
#define WHITE 0

//BLE Server name (the other ESP32 name running the server sketch)
#define bleServerName "XIAOESP32S3_BLE"

BLECharacteristic *pCharacteristic;
bool deviceConnected = false;


class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
  };
  
  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false; 
  }
};

//declaration of sox item
Adafruit_LSM6DSOX sox;

void setup() {
  Serial.begin(115200);

  //Reset Pin Initialization
  pinMode(RESETPin, INPUT_PULLUP);
  
  ///
  //Accell Setup
  ///
  while (!Serial)
    delay(10);  // will pause Zero, Leonardo, etc until serial console opens

  Serial.println("Adafruit LSM6DSOX test!");

  if (!sox.begin_I2C()) {
    while (1) {
      delay(10);
    }
  }

  Serial.println("LSM6DSOX Found!");

  // sox.setAccelRange(LSM6DS_ACCEL_RANGE_2_G);
  Serial.print("Accelerometer range set to: ");
  switch (sox.getAccelRange()) {
    case LSM6DS_ACCEL_RANGE_2_G:
      Serial.println("+-2G");
      break;
    case LSM6DS_ACCEL_RANGE_4_G:
      Serial.println("+-4G");
      break;
    case LSM6DS_ACCEL_RANGE_8_G:
      Serial.println("+-8G");
      break;
    case LSM6DS_ACCEL_RANGE_16_G:
      Serial.println("+-16G");
      break;
  }

  // sox.setGyroRange(LSM6DS_GYRO_RANGE_250_DPS );
  Serial.print("Gyro range set to: ");
  switch (sox.getGyroRange()) {
    case LSM6DS_GYRO_RANGE_125_DPS:
      Serial.println("125 degrees/s");
      break;
    case LSM6DS_GYRO_RANGE_250_DPS:
      Serial.println("250 degrees/s");
      break;
    case LSM6DS_GYRO_RANGE_500_DPS:
      Serial.println("500 degrees/s");
      break;
    case LSM6DS_GYRO_RANGE_1000_DPS:
      Serial.println("1000 degrees/s");
      break;
    case LSM6DS_GYRO_RANGE_2000_DPS:
      Serial.println("2000 degrees/s");
      break;
    case ISM330DHCX_GYRO_RANGE_4000_DPS:
      break;  // unsupported range for the DSOX
  }

  // sox.setAccelDataRate(LSM6DS_RATE_12_5_HZ);
  Serial.print("Accelerometer data rate set to: ");
  switch (sox.getAccelDataRate()) {
    case LSM6DS_RATE_SHUTDOWN:
      Serial.println("0 Hz");
      break;
    case LSM6DS_RATE_12_5_HZ:
      Serial.println("12.5 Hz");
      break;
    case LSM6DS_RATE_26_HZ:
      Serial.println("26 Hz");
      break;
    case LSM6DS_RATE_52_HZ:
      Serial.println("52 Hz");
      break;
    case LSM6DS_RATE_104_HZ:
      Serial.println("104 Hz");
      break;
    case LSM6DS_RATE_208_HZ:
      Serial.println("208 Hz");
      break;
    case LSM6DS_RATE_416_HZ:
      Serial.println("416 Hz");
      break;
    case LSM6DS_RATE_833_HZ:
      Serial.println("833 Hz");
      break;
    case LSM6DS_RATE_1_66K_HZ:
      Serial.println("1.66 KHz");
      break;
    case LSM6DS_RATE_3_33K_HZ:
      Serial.println("3.33 KHz");
      break;
    case LSM6DS_RATE_6_66K_HZ:
      Serial.println("6.66 KHz");
      break;
  }

  // sox.setGyroDataRate(LSM6DS_RATE_12_5_HZ);
  Serial.print("Gyro data rate set to: ");
  switch (sox.getGyroDataRate()) {
    case LSM6DS_RATE_SHUTDOWN:
      Serial.println("0 Hz");
      break;
    case LSM6DS_RATE_12_5_HZ:
      Serial.println("12.5 Hz");
      break;
    case LSM6DS_RATE_26_HZ:
      Serial.println("26 Hz");
      break;
    case LSM6DS_RATE_52_HZ:
      Serial.println("52 Hz");
      break;
    case LSM6DS_RATE_104_HZ:
      Serial.println("104 Hz");
      break;
    case LSM6DS_RATE_208_HZ:
      Serial.println("208 Hz");
      break;
    case LSM6DS_RATE_416_HZ:
      Serial.println("416 Hz");
      break;
    case LSM6DS_RATE_833_HZ:
      Serial.println("833 Hz");
      break;
    case LSM6DS_RATE_1_66K_HZ:
      Serial.println("1.66 KHz");
      break;
    case LSM6DS_RATE_3_33K_HZ:
      Serial.println("3.33 KHz");
      break;
    case LSM6DS_RATE_6_66K_HZ:
      Serial.println("6.66 KHz");
      break;
  }
  

  ///////
  ///BLE Setup
  ///////
  BLEDevice::init(bleServerName);
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  
  BLEService *pService = pServer->createService(BLEUUID((uint16_t)0x181A)); // Environmental Sensing
  pCharacteristic = pService->createCharacteristic(
    BLEUUID((uint16_t)0x2A59), // Analog Output
    BLECharacteristic::PROPERTY_NOTIFY
  );
  pCharacteristic->addDescriptor(new BLE2902());
  
  pService->start();
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(pService->getUUID());
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x0);
  pAdvertising->setMinPreferred(0x1F);
  BLEDevice::startAdvertising();
  
}

void loop() {
  if (deviceConnected) {
    ///
    //Accell Loop
    ///
     //  /* Get a new normalized sensor event */
    sensors_event_t accel;
    sensors_event_t gyro;
    sensors_event_t temp;
    sox.getEvent(&accel, &gyro, &temp);

    int xAccel = accel.acceleration.x;
    int yAccel = accel.acceleration.y;
    
    //  /* Display the results (acceleration is measured in m/s^2) */
    // Serial.print("\t\tAccel X: ");
    // Serial.print(accel.acceleration.x);
    // Serial.print(" \tY: ");
    // Serial.print(accel.acceleration.y);
    // Serial.print(" \tZ: ");
    // Serial.print(accel.acceleration.z);
    // Serial.println(" m/s^2 ");
    // delay(100);

    int signal=0; //message to be sent to client
    int messageFlag = 0; // message flag used to know if some accel flag was raised

    int buttonState = digitalRead(RESETPin); //Reset pin flag
    //BLE Send Data
    Serial.println("Ready to Receive Signal:");
    Serial.print("Signal Value: ");
    Serial.println(signal);
    Serial.print("xAccel: ");
    Serial.println(xAccel);

    
    
    if(xAccel >=3.0){
      Serial.println(xAccel);
      signal = RED;
      Serial.println("RED SIGNAL SENT");
      messageFlag=1;
      
    } else if(xAccel <=-3.0){
      Serial.print("xAccel:");
      Serial.println(xAccel);
      signal = GREEN;
      Serial.println("GREEN SIGNAL SENT");
      messageFlag=1;
      
    }else if(yAccel >=3.0){
      Serial.print("yAccel:");
      Serial.println(yAccel);
      signal = BLUE;
      Serial.println("BLUE SIGNAL SENT");
      messageFlag=1;
      
    }else if(yAccel <=-3.0){
      Serial.print("yAccel:");
      Serial.println(yAccel);
      signal = PURPLE;
      Serial.println("PURPLE SIGNAL SENT");
      messageFlag=1;
      
    }else if (buttonState == LOW) {
      signal = RESET;
      Serial.println("RESET SIGNAL SENT");
      messageFlag=1;
  }else{
      Serial.print("xAccel:");
      Serial.println(xAccel);
      Serial.print("yAccel:");
      Serial.println(yAccel);
      signal = WHITE;
      Serial.println("NEUTRAL SIGNAL SENT");
      }
      
      
    
    uint8_t signalValue = static_cast<uint8_t>(signal);
    pCharacteristic->setValue(&signalValue, 1); // Send a single byte
    pCharacteristic->notify();
    
    if(messageFlag){ 
      Serial.print("Signal Locked");
      delay(5000);
    }else{
      delay(1000); // bluetooth stack will go into congestion, if too many packets are sent
    }
    
  }else{
    Serial.println("Server: ON, No Client Detected");
  }
}
